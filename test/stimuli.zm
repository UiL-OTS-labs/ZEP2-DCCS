/******************************************************************************\
FILE:           stimuli.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Defines the formats of item table(s) and provides the actual content of
the item table(s) i.e. stimulus information.


HISTORY:
2011-10-25 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.
2017-01-09 MD   Adapted for DCCS

\******************************************************************************/

enum TaskOrder {
    COLOR_FIRST,
    SHAPE_FIRST
}

// Symbolic definition of item type.
enum ItemType
{
    NOT_YET_APPLIED,                 // Temp invalid initialization value
    SORT_BY_COLOR,                   // non-word
    SORT_BY_SHAPE,                   // real word
}

// Whether the participant selects by color or by shape
enum ResponseType
{
    NO_RESP,
    RESP_COLOR,
    RESP_SHAPE,
}


// Item table record.
record TestItem
{
    int             id;             // item id
    string          phase;          // phase of the stimulus e.g prac, preswitch, postswitch
    ItemType        type;           // item type
    string          cue_fn;         // image file name for cue 
    string          stim_fn;        // image file name for stimulus
    ResponseType    resp_left;      // left button corresponds with: 
    ResponseType    resp_right;     // right button corresponds with: 
    bool            paint_square;   // whether or not to present a square
                                    // around the stimulus
    string          soundfile;      // soundfile to play or "" empty for no file
}


// Practice item table.
//   index: item number
TestItem[] prac_items =
{
    {1, "prac", NOT_YET_APPLIED, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, false, ""},
    {2, "prac", NOT_YET_APPLIED, "c_2.png", "s_2.png", RESP_SHAPE, RESP_COLOR, false, ""},
    {3, "prac", NOT_YET_APPLIED, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, false, ""},
}


// preswitch item table.
//   index: item number
TestItem[] preswitch_items =
{
    {1, "preswitch", NOT_YET_APPLIED, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, false, ""},
    {2, "preswitch", NOT_YET_APPLIED, "c_2.png", "s_2.png", RESP_SHAPE, RESP_COLOR, false, ""},
    {3, "preswitch", NOT_YET_APPLIED, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, false, ""},
}

// postswitch item table.
//   index: item number
TestItem[] postswitch_items =
{
    {1, "postswitch", NOT_YET_APPLIED, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, false, ""},
    {2, "postswitch", NOT_YET_APPLIED, "c_2.png", "s_2.png", RESP_SHAPE, RESP_COLOR, false, ""},
    {3, "postswitch", NOT_YET_APPLIED, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, false, ""},
}

TestItem[] mixed_items =
{
    {1, "mixed", SORT_BY_COLOR, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, true, "color.wav"},
    {2, "mixed", SORT_BY_SHAPE, "c_2.png", "s_2.png", RESP_SHAPE, RESP_COLOR, false, "shape.wav"},
    {3, "mixed", SORT_BY_COLOR, "c_1.png", "s_1.png", RESP_COLOR, RESP_SHAPE, true, "color.wav"},
}

void
setup_order(TaskOrder order) {
    int i = 0;
    while (i < prac_items.size) {
        prac_items[i].type = order == COLOR_FIRST ? SORT_BY_COLOR : SORT_BY_SHAPE;
        i++;
    }

    i = 0;
    while (i < preswitch_items.size) {
        preswitch_items[i].type = order == COLOR_FIRST ? SORT_BY_COLOR : SORT_BY_SHAPE;
        i++;
    }
    
    i = 0;
    while (i < postswitch_items.size) {
        postswitch_items[i].type = order == COLOR_FIRST ? SORT_BY_SHAPE : SORT_BY_COLOR;
        i++;
    }
}
