/******************************************************************************\
FILE:           task.zm
AUTHOR:         
ADAPTED BY:     -

DESCRIPTION:

Dimensional Card Change Sort


Global structure of this experiment phase:

  - instructions



HISTORY:

\******************************************************************************/

//requires 2.6;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;
import instructions;

bool skip_mixed()
{
    bool ret;
    if (selected_group == OLD)
        ret = false;
    else
        ret = true;

    return ret;
}

Block task
{
    Part instructions_1
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                PRE_PRAC_INSTRUCTION,
                true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(num_cycles, true, false);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                PRE_SWITCH_INSTRUCTION,
                true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }
    
    Block preswitch
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test item table.
            if (shuffle_preswitch_items() != OK) terminate;

            num_cycles = preswitch_items.size;

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            save_trial_data();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = preswitch_items[preswitch.cycle];

                test_page.action(this, item, reference_time, preswitch.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = preswitch.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                // output.word = item.word;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
    
    Part pause_post_switch
    {
        on_event:entry()
        {
            pause_page.set_text(
                POST_SWITCH_INSTRUCTION,
                true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }
    
    Block postswitch
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test item table.
            if (shuffle_postswitch_items() != OK) terminate;

            num_cycles = postswitch_items.size;

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            save_trial_data();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = postswitch_items[postswitch.cycle];

                test_page.action(this, item, reference_time, postswitch.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = postswitch.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                // output.word = item.word;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    TransientPart test_mixed
    {
        on_event:entry()
        {
            if (skip_mixed()) {
                final_blank.enter();
            }
        }
    }
    
    
    Part pause_mixed
    {
        on_event:entry()
        {
            pause_page.set_text(
                MIXED_INSTRUCTION,
                true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }
    
    Block mixed
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            // Randomize test item table.
            if (shuffle_mixed_items() != OK) terminate;

            num_cycles = mixed_items.size;

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, false, false);
        }

        on_event:exit()
        {
            test_page.cleanup();

            save_trial_data();
        }

        Trial trial
        {
            on_event:entry()
            {
                item = mixed_items[mixed.cycle];

                test_page.action(this, item, reference_time, mixed.cycle);
            }

            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = mixed.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                // output.word = item.word;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                test_output_append(output);
            }
        }
    }
    
    Part final_blank
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
