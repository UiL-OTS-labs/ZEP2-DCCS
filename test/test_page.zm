/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2011-10-25 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.

\******************************************************************************/

import std_sound_output_device;

// Symbolic definition of possible responses.
enum TestEvent {
    RESPONSE_NO         = 0,
    RESPONSE_YES        = 1,
}

Page test_page
{
    TestItem    item;           // trial control parameters

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }

    on_event:message()
    {
        // Process response box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }

        CanvasGadget canvas
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 1280, 720;
                // offset_x = width / 2;
                // offset_y = height / 2;
            }
            
            ImageShape cue
            {
                init()
                {
                    width = 1280;
                    height = 720;
                }
            }

            ImageShape stimulus
            {
                init()
                {
                    width = 1280;
                    height = 720;
                }
            }

            RectangleShape rect
            {
                init()
                {
                    line_width = 25;
                    width = 1280 - line_width;
                    height = 720 - line_width;
                    offset_x = line_width/2;
                    offset_y = line_width/2;
                    line_pattern_color = color:black;
                }
            }
        }

        time start_stimulus(time t)
        {
            //
            canvas.cue.image = stimuli_dir() + "images/" + item.cue_fn;

            // Prepare stimulus presentation object.
            canvas.stimulus.image = stimuli_dir() + "images/" + item.stim_fn;

            // optionally display rectangle
            if (item.paint_square) {
                canvas.rect.start(t, -1ms);
            }

            // Start cue.
            canvas.cue.start(t, CUE_DURATION);
            time cueoffset = canvas.cue.expected_finish_time;

            // Start stimulus at fixation offset.
            canvas.stimulus.start(cueoffset, STIMULUS_DURATION);


            // Return stimulus onset time.
            return canvas.stimulus.expected_start_time;
        }


        void reset()
        {
            full_abort();

            canvas.stimulus.is_visible = false;
            canvas.cue.is_visible = false;
            canvas.rect.is_visible = false;
        }
    }

    SoundPlayback sound_cue
    {

        SoundFile clip {}


        void play(time t)
        {
            abort();

            sound_cue.device = sound_output_device;

            if (item.soundfile != "") {
                clip.file = stimuli_dir() + "sounds/" + item.soundfile;
                start(t);
            }
        }

    }

    Response response
    {
        // Response data.
        int             value;          // response value: 0=left button, 1=right button, -1=timeout
        ResponseType    chosen_resp;
        int             rt;             // response time [ms]
        bool            correct;        // correct response: 0=no, 1=yes, -1=n.a.


        void clear()
        {
            value = -1;
            chosen_resp = NO_RESP;
            rt = -9999;
            correct = false;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the
            // response interval.
            if (validity == HIT_VALID)
            {
                value = val;
                if (value == 0)
                    chosen_resp = item.resp_left;
                if (value == 1)
                    chosen_resp = item.resp_right;

                if ((item.type == SORT_BY_SHAPE && chosen_resp == RESP_SHAPE) ||
                    (item.type == SORT_BY_COLOR && chosen_resp == RESP_COLOR))
                    correct = true;
                else
                    correct = false;

                rt = int(reaction_time(0));

                ignore_remaining_hits();

                stop();
            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }


        on_event:finish()
        {
            real correctness = 0;
            if (num_valid_hits > 0) correctness = correct ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, correctness,
                    FEEDBACK_DURATION))
                done(CONTINUE);
        }


        on_event:message()
        {
            done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();

        signal_target(msgid);   // tell caller we're done
        target = null;

        sound_cue.abort();

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ?
            "is it a real word?" : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable response box buttons and fallback keyboard keys.
        control.target = this;
        control.disable_buttons();
        control.disable_keys();
        control.enable_button(BUTTON_0, RESPONSE_NO);
        control.enable_button(BUTTON_2, RESPONSE_YES);
        control.enable_key(KEY_Shift_L, RESPONSE_NO);
        control.enable_key(KEY_Shift_R, RESPONSE_YES);
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.disable_buttons();
        control.disable_keys();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;


        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);


        // Reset response data.
        response.clear();


        // Start fixation symbol and stimulus.
        time stimonset = layout.start_stimulus(tref);

        // Start sound cue together with fix cross stimulus
        sound_cue.play(tref);

        // Response interval starts at stimulus onset. Timeout after
        // RESPONSE_DURATION unless this duration is 0s or less.
        response.start(stimonset, RESPONSE_DURATION);


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " +
            string(item.type) + "  " +
            string(item.stim_fn));


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
